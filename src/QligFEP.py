import argparse
import re
import glob
import os
import shutil
import stat
import shlex
import sys
import json
from random import randrange
from subprocess import check_output

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../share/')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../env/')))

# Q-GPU native libraries
import IO
import topology as TOPOLOGY
import settings as SETTINGS
import md       as MD
import fep      as FEP

# This needs to be fixed!!
globaldata = {'replicates' : None,
              'randrep'    : {},             
              'Temp'       : [],
              'MDs'        : []
             }

class Random():
    """
        Gets total replicates, constructs a dictionary of random values per
        replicate
    """
    def __init__(self):        
        repdic = {}
        for i in range(0, globaldata['replicates']):
            repdic[i] = randrange(0,9999)

        globaldata['randrep'] = repdic

class Read_Submit():
    def __init__(self,oldFEP):        
        self.oldFEP = oldFEP
        self.submitfile = self.oldFEP + '/FEP_submit.sh'

        # get some data
        if os.path.isfile(self.submitfile) == True:
            self.get_data()
            
        else:
            print(">>> FATAL: can't find {}, is the specified directory generated by QligFEP?".format(self.submitfile))
            sys.exit()
        
    def get_data(self):
        with open(self.submitfile) as infile:
            for line in infile:
                line = line.split('=')
                if line[0] == 'runs':
                    globaldata['replicates']  = int(line[1])
                
                if line[0] == 'temperatures':
                    T = line[1][1:-2]
                    globaldata['Temp'].append(float(T))
                
class Create_Environment():
    def __init__(self,wd,oldFEP,overwrite):
        oldFEProot = oldFEP.split('/')[-1]
        if oldFEProot[-1] == '/':
            oldFEProot = oldFEProot[:-1]
        
        # create user specified main workdir
        IO.create_dir('{}'.format(wd),overwrite)
            
        # create FEPdir from old FEP
        IO.create_dir('{}/{}'.format(wd,oldFEProot),overwrite)
        
        # create inputfile dir
        IO.create_dir('{}/{}/{}'.format(wd,oldFEProot,'inputfiles'),overwrite)
        
        # create results dir
        IO.create_dir('{}/{}/{}'.format(wd,oldFEProot,'results'),overwrite)        

        # create temperature dirs
        for T in globaldata['Temp']:
            IO.create_dir('{}/{}/{:.1f}'.format(wd,oldFEProot,T),overwrite)

            # create replicate dirs
            for r in globaldata['randrep']:
                IO.create_dir('{}/{}/{:.1f}/{:02d}'.format(wd,oldFEProot,T,r),overwrite)
                
class Write_Topology():
    def __init__(self,wd,oldFEP):
        top = oldFEP + '/inputfiles/dualtop.top'
        oldFEProot = oldFEP.split('/')[-1]        
        
        #read the topology
        read_top  = TOPOLOGY.Read_Topology(top)
        top_data = read_top.Q()     

        # write the .json topology
        write_top = TOPOLOGY.Write_Topology(top_data)
        out_json = '{}/{}/inputfiles/dualtop.json'.format(wd,oldFEProot)
        write_top.JSON(out_json)
    
class Write_FEP():
    def __init__(self,wd,oldFEP):
        fep = oldFEP + '/inputfiles/FEP1.fep'
        oldFEProot = oldFEP.split('/')[-1]        
        
        #read the FEP file
        read_fep  = FEP.Read_Fep(fep)
        fep_data = read_fep.Q()     

        # write the .json FEP file
        write_fep = FEP.Write_Fep(fep_data)
        out_json = '{}/{}/inputfiles/FEP1.json'.format(wd,oldFEProot)
        write_fep.JSON(out_json)
        
class Write_MD():
    def __init__(self,wd,oldFEP):
        self.wd = wd
        self.oldFEP = oldFEP
        self.oldFEProot = oldFEP.split('/')[-1]
        reps = globaldata['randrep']

        eq = sorted(glob.glob('{}/inputfiles/eq*.inp'.format(oldFEP)))
        md = sorted(glob.glob('{}/inputfiles/md*.inp'.format(oldFEP)))[::-1]
        mdfiles = eq + md
        
        for replicate in globaldata['randrep']:
            for i, md in enumerate(mdfiles):
                self.mdroot = md.split('/')[-1]
                self.mdroot = self.mdroot.split('.')[0]
                if not self.mdroot in globaldata['MDs']:
                    globaldata['MDs'].append(self.mdroot) 

                md_data = self.construct(md)
                
                if 'md' in md or 'eq5' in md:
                    md_data['temperature'] = self.T
                
                
                if 'eq1' in md:
                    md_data['random_seed'] = globaldata['randrep'][replicate]
                    
                else:
                    md_data['random_seed'] = None
                self.write(md_data, replicate)
            
    def construct(self,md):
        read_md  = MD.Read_MD(md)
        md_data = read_md.Q()     

        return md_data
    
    def write(self,md_data, replicate):
        write_md = MD.Write_MD(md_data)
        if self.mdroot == 'eq1':
            for T in globaldata['Temp']:
                self.T = T
                self.r = replicate            
                out_json = '{}/{}/{:.1f}/{:02d}/{}.json'.format(self.wd,
                                                            self.oldFEProot,
                                                            self.T,
                                                            self.r,
                                                            self.mdroot,
                                                            )

                write_md.JSON(out_json)
            
        else:                
            out_json = '{}/{}/inputfiles/{}.json'.format(self.wd,
                                                       self.oldFEProot,
                                                       self.mdroot,
                                                      )
            
            write_md.JSON(out_json)
        
class Write_Qfepfile():
    def __init__(self,wd,oldFEP):
        """
            TO DO: move Q file parsing to share module
            Read qfep.inp, populate the following data:
            'workdir'           : None,
            'states'            : None,
            'offdiag_elements'  : None,
            'kT'                : None,
            'points_to_skip'    : None,
            'only_QQ'           : None,
            'gap_bins'          : None,
            'points_per_bin'    : None,
            'alpha_state'       : None,
            'linear_combination': [],
            'energy_files'      : []            
        """
        self.data = {'workdir'           : None,
                     'states'            : None,
                     'offdiag_elements'  : None,
                     'kT'                : None,
                     'points_to_skip'    : None,
                     'only_QQ'           : False,
                     'gap_bins'          : None,
                     'points_per_bin'    : None,
                     'alpha_state'       : None,
                     'linear_combination': [],
                     'energy_files'      : [] 
                    }
        
        self.wd = wd
        self.oldFEP = oldFEP
        self.oldFEProot = oldFEP.split('/')[-1]
        self.tmp = []
        
        self.read_qfep()
        
        for T in globaldata['Temp']:
            self.T = T
            for replicate in globaldata['randrep']:
                if replicate != 0:
                    continue
                self.r = replicate
                #self.data['workdir'] = '{}/{}/{:.1f}/{:02d}'.format(self.wd,
                #                                  self.oldFEProot,
                #                                  self.T,
                #                                  self.r,
                #                                 )

                self.write_qfep()
        
        
    def read_qfep(self):
        cnt = -1
        with open('{}/inputfiles/qfep.inp'.format(self.oldFEP)) as inputfile:
            for line in inputfile:
                line = line.strip()
                line = line.split()
                cnt += 1
                if cnt == 1:
                    self.data['states'] = line[0]
                    self.data['offdiag_elements'] = line[1]
                    
                if cnt == 2:
                    self.data['kT'] = line[0]
                    self.data['points_to_skip'] = line[1]
                
                if cnt == 3:
                    self.data['gap_bins'] = line[0]
                                    
                if cnt == 4:
                    self.data['points_per_bin'] = line[0]
                                                        
                if cnt == 5:
                    self.data['alpha_state'] = line[0]
                    
                if cnt == 6:
                    for combination in line:
                        self.data['linear_combination'].append(line)
                        
                if cnt > 8:
                    ener_root = line[0].split('/')[-1].split('.')[0]
                    fep1 = '{}/dualtop/output/energies.csv'.format(ener_root)
                    fep2 = '{}.json'.format(ener_root)
                    fepout = [fep1,fep2]
                    self.data['energy_files'].append(fepout) 
                    
    def write_qfep(self):
        out_json = '{}/{}/inputfiles/{}'.format(self.wd,
                                                  self.oldFEProot,
                                                  'qfep.json',
                                                 )
        with open(out_json, 'w') as outfile:
            inputs = self.data
            json.dump(inputs,outfile,indent=2) 
        
class Write_Runfile():
    def __init__(self,wd,oldFEP,cluster):
        self.qdyn = SETTINGS.ROOT + 'bin/qdyn.py '
        self.qfep = SETTINGS.ROOT + 'bin/qfep.py '
        self.wd = wd
        self.oldFEProot = oldFEP.split('/')[-1]                
        self.cluster = cluster
        self.n_processes = 10
        self.commands = []
        
        self.topology = '../../inputfiles/dualtop.json'
        self.fepfile  = '../../inputfiles/FEP1.json'

        for i, mdfile in enumerate(globaldata['MDs']):
            if i == 0:
                command = "    os.system('python {} -t {} -m {}.json -f {} -d {} --clean')\n".format(self.qdyn,
                                                                            self.topology,
                                                                            mdfile,
                                                                            self.fepfile,
                                                                            mdfile
                                                                           )
            else:
                restart = globaldata['MDs'][i-1]
                command = "    os.system('python {} -t {} -m ../../inputfiles/{}.json -f {} -d {} -r {}/dualtop/output --clean')\n".format(self.qdyn,
                                                                                  self.topology,
                                                                                  mdfile,
                                                                                  self.fepfile,
                                                                                  mdfile,
                                                                                  restart
                                                                           )                
            self.commands.append(command)
            
        # add the qfep command:
        command = "    os.system('python {} -d out -i ../../inputfiles/qfep.json')\n".format(self.qfep)
        self.commands.append(command)
        
        # Clean up commands
        command = "    shutil.move('out/qfep.out', '../../results/qfep-{:02d}.out'.format(i))\n"
        self.commands.append(command)
        
        command = "    os.chdir('../../')\n"
        self.commands.append(command)        
        
        command = "    os.system('tar -cvf raw_data-{:02d}.tar.gz 298.0/{:02d}'.format(i,i))\n"
        self.commands.append(command)
        
        command = "    shutil.rmtree('298.0/{:02d}'.format(i))\n"
        self.commands.append(command)
        
        for T in globaldata['Temp']:
            self.T = T
            for replicate in globaldata['randrep']:
                self.r = replicate
                self.py = '{}/{}/run.py'.format(wd,
                                                self.oldFEProot,
                                               )
                self.write_py()
        
    def write_py(self):
        with open(self.py,'w') as outfile:
            outfile.write(
                "import multiprocessing\n"                                  \
                "import shutil\n"                                  \
                "import os\n\n"                                             \
                "def worker(i):\n"                                          \
                "    os.chdir('298.0/{:02d}'.format(i))\n"      ## HARDCODED,NEEDS FIX
            )
            for command in self.commands:
                outfile.write(command)
                
            outfile.write(
                "    return\n\n"                                            \
                "if __name__ == '__main__':\n"                              \
                "    jobs = []\n"                                           \
                "    for i in range({}):\n"                                 \
                "        p = multiprocessing.Process(target=worker,args=(i,))\n"      \
                "        jobs.append(p)\n"                                  \
                "        p.start()".format(self.n_processes)                                 
            )

class Write_Submitfile():
    def __init__(self,wd,oldFEP,cluster):
        self.cluster = cluster
        self.oldFEProot = oldFEP.split('/')[-1]                
        
        if self.cluster != None:
            self.sh = '{}/{}/submit.sh'.format(wd,
                                self.oldFEProot,
                               )
            
        self.write_sh()
            
    def write_sh(self):
        with open(self.sh,'w') as outfile:
            outfile.write('#!/bin/bash\n')
            # construct slurm type file
            for key in SETTINGS.SLURM[self.cluster]:
                outfile.write('#SBATCH {} {}\n'.format(key,
                                                     SETTINGS.SLURM[self.cluster][key]
                                                    ))
            for module in SETTINGS.MODULES[self.cluster]:
                outfile.write('module load {}\n'.format(module))

            outfile.write('python run.py')

class Init(object):
    def __init__(self, data):
        """
            Main loop of QligFEP module. Input is argparse dictionary from main binary.  
        
        """
        self.environment = data
        if self.environment['oldFEP'] != None:
            print("Converting old style FEP files in {}".format(self.environment['oldFEP']))
            Read_Submit(self.environment['oldFEP'])
        
        # Collect random seeds per replicate
        Random()
        
        Create_Environment(self.environment['wd'],
                           self.environment['oldFEP'],
                           self.environment['overwrite']
                          )
        
        # Needs to be split in backward compatible reading and constructing on the fly
        Write_Topology(self.environment['wd'],
                       self.environment['oldFEP']
                      )
        
        Write_FEP(self.environment['wd'],
                  self.environment['oldFEP']
                 )
        
        Write_MD(self.environment['wd'],
                 self.environment['oldFEP']
                 )
        
        Write_Qfepfile(self.environment['wd'],
                       self.environment['oldFEP']
                      )
        
        Write_Runfile(self.environment['wd'],
                      self.environment['oldFEP'],
                      self.environment['cluster']
                      )
        
        Write_Submitfile(self.environment['wd'],
                         self.environment['oldFEP'],
                         self.environment['cluster']
                      )
